<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>数据结构与算法</title>
      <link href="/shu-ju-jie-gou-yu-suan-fa/"/>
      <url>/shu-ju-jie-gou-yu-suan-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="【算法】图的邻接矩阵：-K-顶点"><a href="#【算法】图的邻接矩阵：-K-顶点" class="headerlink" title="【算法】图的邻接矩阵：$K$顶点"></a>【算法】图的邻接矩阵：$K$顶点</h1><p>（2023年408统考第41题，13分）<br>已知有向图$G$采用邻接矩阵存储，定义如下：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">typedef struct{                                      //图的定义int numVertices, numEdges;                       //图中实际的顶点数和边数char VerticesList[MAXV];                         //顶点表，MAXV为已定义常数int Edge[MAXV][MAXV];                            //边表}MGraph;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将图中出度大于入度的顶点称为$K$顶点。<br>例如，下图中结点$a$和结点$b$均为$K$顶点。<br><img src="/images/2023/2.png" width="15%" height="15%"><br>请设计算法<code>int printVertices(MGraph G)</code>，对任意给定的非空有向图$G$，输出$G$中所有$K$顶点，并返回$K$顶点的个数。<br>（1）给出算法的基本思想；（2）根据设计思想，采用C或C++语言描述算法，关键之处给出注释。</p><hr><blockquote><p>邻接矩阵中第$i$行之和即为第$i$个顶点的出度，第$i$列之和即为第$i$个顶点的入度。因此，只要分别按行按列遍历图$G$的邻接矩阵，即可求出每个顶点的入度和出度。如果一个顶点的出度大于入度，则将该$K$顶点输出，计数器加一。</p></blockquote><pre class="line-numbers language-C" data-language="C"><code class="language-C">int printVertices(MGraph G){                      //打印图G的所有K顶点并计数int i, j;int inDegree, outDegree;int count = 0;for(i=0;i&lt;G.numVertices;++i){                 //遍历图的顶点inDegree = 0;                             //初始化顶点的入度outDegree = 0;                            //初始化顶点的出度for(j=0;j&lt;G.numVertices;++j){if(G.Edge[i][j]==1) outDegree++;      //有结点i到结点j的边，出度加一if(G.Edge[j][i]==1) inDegree++;       //有结点j到结点i的边，入度加一}if(outDegree&gt;inDegree){                   //出度大于入度的顶点是K顶点printf("%s是K顶点\n",G.VerticeList[i]);                                      //输出K顶点count++;                              //计数器的值加一}                    }return count;}                                                 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><ol><li>时间复杂度O($n^2$)，空间复杂度O(1)；</li><li>vertex(pl. vertices) n.顶点、头顶、天顶；</li><li>以上代码来源于ChatGPT，有删改。</li></ol></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机与安全理论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>你好呀</title>
      <link href="/ni-hao-ya/"/>
      <url>/ni-hao-ya/</url>
      
        <content type="html"><![CDATA[<p>Halo，这里是Cardioid-line的Blog。<br>这里暂时还没有什么东西，以后或许会在这里随便记录些什么。</p><p>Cardioid-line是一种我很喜欢的曲线，所以选用其作为我的笔名。</p><p>希望你天天开心 ^_^<br>谁跟钱过不去啊？欢迎在文章末尾打赏处拿钱砸我！</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
